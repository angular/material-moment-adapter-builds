{"version":3,"file":"material-moment-adapter.mjs","sources":["../../../../../k8-fastbuild-ST-199a4f3c4e20/bin/src/material-moment-adapter/adapter/moment-date-adapter.ts","../../../../../k8-fastbuild-ST-199a4f3c4e20/bin/src/material-moment-adapter/adapter/moment-date-formats.ts","../../../../../k8-fastbuild-ST-199a4f3c4e20/bin/src/material-moment-adapter/adapter/index.ts"],"sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n\nimport {Injectable, InjectionToken, inject} from '@angular/core';\nimport {DateAdapter, MAT_DATE_LOCALE} from '@angular/material/core';\n// Depending on whether rollup is used, moment needs to be imported differently.\n// Since Moment.js doesn't have a default export, we normally need to import using the `* as`\n// syntax. However, rollup creates a synthetic default module and we thus need to import it using\n// the `default as` syntax.\n// TODO(mmalerba): See if we can clean this up at some point.\nimport * as _moment from 'moment';\n// tslint:disable-next-line:no-duplicate-imports\nimport {default as _rollupMoment, Moment, MomentFormatSpecification, MomentInput} from 'moment';\n\nconst moment = _rollupMoment || _moment;\n\n/** Configurable options for MomentDateAdapter. */\nexport interface MatMomentDateAdapterOptions {\n  /**\n   * When enabled, the dates have to match the format exactly.\n   * See https://momentjs.com/guides/#/parsing/strict-mode/.\n   */\n  strict?: boolean;\n\n  /**\n   * Turns the use of utc dates on or off.\n   * Changing this will change how Angular Material components like DatePicker output dates.\n   * Defaults to `false`.\n   */\n  useUtc?: boolean;\n}\n\n/** InjectionToken for moment date adapter to configure options. */\nexport const MAT_MOMENT_DATE_ADAPTER_OPTIONS = new InjectionToken<MatMomentDateAdapterOptions>(\n  'MAT_MOMENT_DATE_ADAPTER_OPTIONS',\n  {\n    providedIn: 'root',\n    factory: () => ({useUtc: false}),\n  },\n);\n\n/** Creates an array and fills it with values. */\nfunction range<T>(length: number, valueFunction: (index: number) => T): T[] {\n  const valuesArray = Array(length);\n  for (let i = 0; i < length; i++) {\n    valuesArray[i] = valueFunction(i);\n  }\n  return valuesArray;\n}\n\n/** Adapts Moment.js Dates for use with Angular Material. */\n@Injectable()\nexport class MomentDateAdapter extends DateAdapter<Moment> {\n  private _options = inject<MatMomentDateAdapterOptions>(MAT_MOMENT_DATE_ADAPTER_OPTIONS, {\n    optional: true,\n  });\n\n  // Note: all of the methods that accept a `Moment` input parameter immediately call `this.clone`\n  // on it. This is to ensure that we're working with a `Moment` that has the correct locale setting\n  // while avoiding mutating the original object passed to us. Just calling `.locale(...)` on the\n  // input would mutate the object.\n\n  private _localeData: {\n    firstDayOfWeek: number;\n    longMonths: string[];\n    shortMonths: string[];\n    dates: string[];\n    longDaysOfWeek: string[];\n    shortDaysOfWeek: string[];\n    narrowDaysOfWeek: string[];\n  };\n\n  constructor(...args: unknown[]);\n\n  constructor() {\n    super();\n    const dateLocale = inject<string>(MAT_DATE_LOCALE, {optional: true});\n    this.setLocale(dateLocale || moment.locale());\n  }\n\n  override setLocale(locale: string) {\n    super.setLocale(locale);\n\n    let momentLocaleData = moment.localeData(locale);\n    this._localeData = {\n      firstDayOfWeek: momentLocaleData.firstDayOfWeek(),\n      longMonths: momentLocaleData.months(),\n      shortMonths: momentLocaleData.monthsShort(),\n      dates: range(31, i => this.createDate(2017, 0, i + 1).format('D')),\n      longDaysOfWeek: momentLocaleData.weekdays(),\n      shortDaysOfWeek: momentLocaleData.weekdaysShort(),\n      narrowDaysOfWeek: momentLocaleData.weekdaysMin(),\n    };\n  }\n\n  getYear(date: Moment): number {\n    return this.clone(date).year();\n  }\n\n  getMonth(date: Moment): number {\n    return this.clone(date).month();\n  }\n\n  getDate(date: Moment): number {\n    return this.clone(date).date();\n  }\n\n  getDayOfWeek(date: Moment): number {\n    return this.clone(date).day();\n  }\n\n  getMonthNames(style: 'long' | 'short' | 'narrow'): string[] {\n    // Moment.js doesn't support narrow month names, so we just use short if narrow is requested.\n    return style == 'long' ? this._localeData.longMonths : this._localeData.shortMonths;\n  }\n\n  getDateNames(): string[] {\n    return this._localeData.dates;\n  }\n\n  getDayOfWeekNames(style: 'long' | 'short' | 'narrow'): string[] {\n    if (style == 'long') {\n      return this._localeData.longDaysOfWeek;\n    }\n    if (style == 'short') {\n      return this._localeData.shortDaysOfWeek;\n    }\n    return this._localeData.narrowDaysOfWeek;\n  }\n\n  getYearName(date: Moment): string {\n    return this.clone(date).format('YYYY');\n  }\n\n  getFirstDayOfWeek(): number {\n    return this._localeData.firstDayOfWeek;\n  }\n\n  getNumDaysInMonth(date: Moment): number {\n    return this.clone(date).daysInMonth();\n  }\n\n  clone(date: Moment): Moment {\n    return date.clone().locale(this.locale);\n  }\n\n  createDate(year: number, month: number, date: number): Moment {\n    // Moment.js will create an invalid date if any of the components are out of bounds, but we\n    // explicitly check each case so we can throw more descriptive errors.\n    if (typeof ngDevMode === 'undefined' || ngDevMode) {\n      if (month < 0 || month > 11) {\n        throw Error(`Invalid month index \"${month}\". Month index has to be between 0 and 11.`);\n      }\n\n      if (date < 1) {\n        throw Error(`Invalid date \"${date}\". Date has to be greater than 0.`);\n      }\n    }\n\n    const result = this._createMoment({year, month, date}).locale(this.locale);\n\n    // If the result isn't valid, the date must have been out of bounds for this month.\n    if (!result.isValid() && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n      throw Error(`Invalid date \"${date}\" for month with index \"${month}\".`);\n    }\n\n    return result;\n  }\n\n  today(): Moment {\n    return this._createMoment().locale(this.locale);\n  }\n\n  parse(value: unknown, parseFormat: string | string[]): Moment | null {\n    if (value && typeof value == 'string') {\n      return this._createMoment(value, parseFormat, this.locale);\n    }\n    return value ? this._createMoment(value).locale(this.locale) : null;\n  }\n\n  format(date: Moment, displayFormat: string): string {\n    date = this.clone(date);\n    if (!this.isValid(date) && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n      throw Error('MomentDateAdapter: Cannot format invalid date.');\n    }\n    return date.format(displayFormat);\n  }\n\n  addCalendarYears(date: Moment, years: number): Moment {\n    return this.clone(date).add({years});\n  }\n\n  addCalendarMonths(date: Moment, months: number): Moment {\n    return this.clone(date).add({months});\n  }\n\n  addCalendarDays(date: Moment, days: number): Moment {\n    return this.clone(date).add({days});\n  }\n\n  toIso8601(date: Moment): string {\n    return this.clone(date).format();\n  }\n\n  /**\n   * Returns the given value if given a valid Moment or null. Deserializes valid ISO 8601 strings\n   * (https://www.ietf.org/rfc/rfc3339.txt) and valid Date objects into valid Moments and empty\n   * string into null. Returns an invalid date for all other values.\n   */\n  override deserialize(value: unknown): Moment | null {\n    let date;\n    if (value instanceof Date) {\n      date = this._createMoment(value).locale(this.locale);\n    } else if (this.isDateInstance(value)) {\n      // Note: assumes that cloning also sets the correct locale.\n      return this.clone(value);\n    }\n    if (typeof value === 'string') {\n      if (!value) {\n        return null;\n      }\n      date = this._createMoment(value, moment.ISO_8601).locale(this.locale);\n    }\n    if (date && this.isValid(date)) {\n      return this._createMoment(date).locale(this.locale);\n    }\n    return super.deserialize(value);\n  }\n\n  isDateInstance(obj: unknown): obj is Moment {\n    return moment.isMoment(obj);\n  }\n\n  isValid(date: Moment): boolean {\n    return this.clone(date).isValid();\n  }\n\n  invalid(): Moment {\n    return moment.invalid();\n  }\n\n  override setTime(target: Moment, hours: number, minutes: number, seconds: number): Moment {\n    if (typeof ngDevMode === 'undefined' || ngDevMode) {\n      if (hours < 0 || hours > 23) {\n        throw Error(`Invalid hours \"${hours}\". Hours value must be between 0 and 23.`);\n      }\n\n      if (minutes < 0 || minutes > 59) {\n        throw Error(`Invalid minutes \"${minutes}\". Minutes value must be between 0 and 59.`);\n      }\n\n      if (seconds < 0 || seconds > 59) {\n        throw Error(`Invalid seconds \"${seconds}\". Seconds value must be between 0 and 59.`);\n      }\n    }\n\n    return this.clone(target).set({hours, minutes, seconds, milliseconds: 0});\n  }\n\n  override getHours(date: Moment): number {\n    return date.hours();\n  }\n\n  override getMinutes(date: Moment): number {\n    return date.minutes();\n  }\n\n  override getSeconds(date: Moment): number {\n    return date.seconds();\n  }\n\n  override parseTime(value: unknown, parseFormat: string | string[]): Moment | null {\n    return this.parse(value, parseFormat);\n  }\n\n  override addSeconds(date: Moment, amount: number): Moment {\n    return this.clone(date).add({seconds: amount});\n  }\n\n  /** Creates a Moment instance while respecting the current UTC settings. */\n  private _createMoment(\n    date?: MomentInput,\n    format?: MomentFormatSpecification,\n    locale?: string,\n  ): Moment {\n    const {strict, useUtc}: MatMomentDateAdapterOptions = this._options || {};\n\n    return useUtc ? moment.utc(date, format, locale, strict) : moment(date, format, locale, strict);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n\nimport {MatDateFormats} from '@angular/material/core';\n\nexport const MAT_MOMENT_DATE_FORMATS: MatDateFormats = {\n  parse: {\n    dateInput: 'l',\n    timeInput: 'LT',\n  },\n  display: {\n    dateInput: 'l',\n    timeInput: 'LT',\n    monthYearLabel: 'MMM YYYY',\n    dateA11yLabel: 'LL',\n    monthYearA11yLabel: 'MMMM YYYY',\n    timeOptionLabel: 'LT',\n  },\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n\nimport {NgModule, Provider} from '@angular/core';\nimport {DateAdapter, MAT_DATE_FORMATS, MatDateFormats} from '@angular/material/core';\nimport {\n  MAT_MOMENT_DATE_ADAPTER_OPTIONS,\n  MatMomentDateAdapterOptions,\n  MomentDateAdapter,\n} from './moment-date-adapter';\nimport {MAT_MOMENT_DATE_FORMATS} from './moment-date-formats';\n\nexport * from './moment-date-adapter';\nexport * from './moment-date-formats';\n\n@NgModule({\n  providers: [\n    {\n      provide: DateAdapter,\n      useClass: MomentDateAdapter,\n    },\n  ],\n})\nexport class MomentDateModule {}\n\n@NgModule({\n  providers: [provideMomentDateAdapter()],\n})\nexport class MatMomentDateModule {}\n\nexport function provideMomentDateAdapter(\n  formats: MatDateFormats = MAT_MOMENT_DATE_FORMATS,\n  options?: MatMomentDateAdapterOptions,\n): Provider[] {\n  const providers: Provider[] = [\n    {\n      provide: DateAdapter,\n      useClass: MomentDateAdapter,\n    },\n    {provide: MAT_DATE_FORMATS, useValue: formats},\n  ];\n\n  if (options) {\n    providers.push({provide: MAT_MOMENT_DATE_ADAPTER_OPTIONS, useValue: options});\n  }\n\n  return providers;\n}\n"],"names":["moment","_rollupMoment","_moment","MAT_MOMENT_DATE_ADAPTER_OPTIONS","InjectionToken","factory","useUtc","range","valuesArray","Array","length","i","valueFunction","MomentDateAdapter","DateAdapter","_options","inject","optional","_localeData","constructor","dateLocale","MAT_DATE_LOCALE","setLocale","locale","momentLocaleData","localeData","firstDayOfWeek","longMonths","months","dates","longDaysOfWeek","weekdays","shortDaysOfWeek","weekdaysShort","narrowDaysOfWeek","weekdaysMin","date","clone","year","month","getDate","day","getMonthNames","style","shortMonths","getDateNames","getDayOfWeekNames","getYearName","format","getFirstDayOfWeek","daysInMonth","ngDevMode","Error","result","_createMoment","isValid","today","value","parseFormat","displayFormat","addCalendarYears","years","add","addCalendarMonths","addCalendarDays","days","deserialize","MAT_MOMENT_DATE_FORMATS","dateInput","timeInput","monthYearLabel","dateA11yLabel","monthYearA11yLabel","ɵmod","i0","ɵɵngDeclareNgModule","minVersion","version","ngImport","type","MomentDateModule","ɵinj","ɵɵngDeclareInjector","providers","decorators","NgModule","provide","MatMomentDateModule","deps","target","ɵɵFactoryTarget","provideMomentDateAdapter","options","push","useValue"],"mappings":"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"}